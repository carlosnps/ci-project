{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>
	<header class="member-schools__description">
		{{ content.field_logo }}
		{{ content.body }}
	</header>
	<div class="member-schools__metadata">
		<span class="member-schools__metadata-item">
			{% if content.field_link %}
				<a href="{{content.field_link[0]['#url']|render}}" target="_blank">{{ label }}</a>
			{% else %}
				{{ label }}
			{% endif %}
		</span>
		{% if content.field_parent_institution.0 is not empty %}
			<span class="member-schools__metadata-item">{{ content.field_parent_institution }}</span>{% endif %}
		{% if content.field_location.0 is not empty %}
			<span class="member-schools__metadata-item">
				{% set countryArray = [] %}
				{% for country in content.field_location %}
					{% set c = country['country'] | render %}
					{% if c not in countryArray %}
						{{c}}
						{% set countryArray = countryArray | merge([c]) %}
					{% endif %}
				{% endfor %}
			</span>
		{% endif %}
	</div>
	<section class="member-schools__list" aria-labeledby="member-schools__list--title">
		<h2 class="visually-hidden" id="member-schools__list--title">All Global Network member schools</h2>
		<input type="checkbox" class="visually-hidden" id="member-schools__list--input">
		<label class="member-schools__list--button button-link outline small arrow-down" for="member-schools__list--input">Select another school</label>
		{{ drupal_view('member_schools', 'block_4') }}
	</section>
	<div class="member-schools__gallery school-slider" id="school-slider-{{node.id}}">
		{{ content.field_image }}
	</div>
	<div class="member-schools__activity color-{{node.id}}" aria-labeledby="member-schools__list--title">
		<h3 id="member-schools__activity--title">Network activity for
			<span class="use-color">{{ label }}</span></h3>
		<div class="member-schools__activity--grid member-schools__activity--block content-group content-group--grid-2up content-group--consistent-width">
			{% set view_networkWeek = drupal_view('blocks_for_member_schools_page', 'network_week', node.id()) | render %}
			{% if view_networkWeek | striptags | trim %}
				<section class="member-schools__activity--network-week member-schools__activity--grid-item">
					<h5>Global Network Week</h5>
					{{view_networkWeek}}</section>
			{% endif %}
			{% set view_certificateExcellence = drupal_view('blocks_for_member_schools_page', 'block_2', node.id()) | render %}
			{% if view_certificateExcellence | striptags | trim %}
				<section class="member-schools__activity--certificate-excellence member-schools__activity--grid-item">
					<h5>Certificate of Excellence</h5>
					{{view_certificateExcellence}}</section>
			{% endif %}
			{% set view_networkCourses = drupal_view('blocks_for_member_schools_page', 'block_3', node.id()) | render %}
			{% if view_networkCourses | striptags | trim %}
				<section class="member-schools__activity--network-courses member-schools__activity--grid-item">
					<h5>Global Network Courses</h5>
					{{view_networkCourses}}</section>
			{% endif %}
			{% set view_networkTeams = drupal_view('blocks_for_member_schools_page', 'network_teams', node.id()) | render %}
			{% if view_networkTeams | striptags | trim %}
				<section class="member-schools__activity--network-teams member-schools__activity--grid-item">
					<h5>Global Network Competition</h5>
					{{view_networkTeams}}</section>
			{% endif %}
		</div>
	</div>

	{% set view_networkAmbassador = drupal_view('blocks_for_member_schools_page', 'global_network_ambassador', node.id()) | render %}
	{% if view_networkAmbassador | striptags | trim %}
		<section class="member-schools__global-network-ambassador member-schools__activity--block">
			<h3>Global Network Student Ambassador</h3>
			{{ view_networkAmbassador }}</section>
	{% endif %}

	{% set view_networkPerspectives = drupal_view('blocks_for_member_schools_page', 'global_network_perspectives', node.id()) | render %}
	{% if view_networkPerspectives | striptags | trim %}
		<section class="member-schools__global-network-perspectives member-schools__activity--block">
			<h3>Global Perspectives & Faculty Research</h3>
			{{ view_networkPerspectives }}</section>
	{% endif %}

	{% set view_networkNews = drupal_view('blocks_for_member_schools_page', 'global_network_news', node.id()) | render %}
	{% if view_networkNews | striptags | trim %}
		<section class="member-schools__global-network-news member-schools__activity--block js--expanding-teaser--container">
			<h3>Global Network News</h3>
			{{ view_networkNews }}</section>
	{% endif %}
</article>